name: PR Check

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

jobs:
  pr-validation:
    name: PR検証
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # PR全履歴を取得してコミット履歴チェック
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate API types
        run: pnpm generate:api

      - name: 🔍 Full quality check
        run: pnpm check

      - name: 🏗️ Build verification
        run: pnpm build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3000/api

      - name: 🧪 Test execution
        run: pnpm test --run

      - name: 📊 Bundle analysis
        run: |
          # Next.js bundle分析（必要に応じて）
          echo "Bundle analysis would run here"

      - name: 🔒 Security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: ✅ PR validation complete
        run: |
          echo "::notice::All PR checks passed successfully!"
          echo "::notice::Ready for review 🚀"

  commit-message-check:
    name: コミットメッセージ検証
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages
        run: |
          # PRの全コミットメッセージをセマンティック形式でチェック
          echo "Checking commit messages in PR..."

          # ベースブランチから現在のブランチまでのコミットを取得
          commits=$(git log --pretty=format:"%s" origin/${{ github.base_ref }}..HEAD)

          semantic_pattern='^(feat|fix|docs|style|refactor|perf|test|chore|ci|revert)(\(.+\))?: .{1,50}'

          echo "$commits" | while IFS= read -r commit_msg; do
            if [[ ! "$commit_msg" =~ $semantic_pattern ]]; then
              echo "::error::Invalid commit message format: $commit_msg"
              echo "::error::Please use semantic commit format: <type>(<scope>): <subject>"
              exit 1
            else
              echo "::notice::✅ Valid commit message: $commit_msg"
            fi
          done
