/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * AI Research POC API
 * AIÊôÇ‰ª£„ÅÆÊñ∞„Åó„ÅÑ„É™„Çµ„Éº„ÉÅ‰ΩìÈ®ì„ÇíÊé¢Á¥¢„Åô„ÇãPOC API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  CreateResearchRequest,
  Error,
  OptimizationResult,
  QueryOptimizationRequest,
  Research,
} from "./models";

import { customInstance } from "../mutator";

/**
 * @summary „É™„Çµ„Éº„ÉÅ„ÇíÂÆüË°å
 */
export const executeResearch = (
  createResearchRequest: CreateResearchRequest,
  signal?: AbortSignal,
) => {
  return customInstance<Research>({
    url: `/research`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createResearchRequest,
    signal,
  });
};

export const getExecuteResearchMutationOptions = <
  TError = Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof executeResearch>>,
    TError,
    { data: CreateResearchRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof executeResearch>>,
  TError,
  { data: CreateResearchRequest },
  TContext
> => {
  const mutationKey = ["executeResearch"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof executeResearch>>,
    { data: CreateResearchRequest }
  > = (props) => {
    const { data } = props ?? {};

    return executeResearch(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ExecuteResearchMutationResult = NonNullable<
  Awaited<ReturnType<typeof executeResearch>>
>;
export type ExecuteResearchMutationBody = CreateResearchRequest;
export type ExecuteResearchMutationError = Error | Error;

/**
 * @summary „É™„Çµ„Éº„ÉÅ„ÇíÂÆüË°å
 */
export const useExecuteResearch = <TError = Error | Error, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof executeResearch>>,
      TError,
      { data: CreateResearchRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof executeResearch>>,
  TError,
  { data: CreateResearchRequest },
  TContext
> => {
  const mutationOptions = getExecuteResearchMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary „ÇØ„Ç®„É™ÊúÄÈÅ©Âåñ„ÇíÂÆüË°å
 */
export const optimizeQuery = (
  queryOptimizationRequest: QueryOptimizationRequest,
  signal?: AbortSignal,
) => {
  return customInstance<OptimizationResult>({
    url: `/query-optimization`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: queryOptimizationRequest,
    signal,
  });
};

export const getOptimizeQueryMutationOptions = <
  TError = Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof optimizeQuery>>,
    TError,
    { data: QueryOptimizationRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof optimizeQuery>>,
  TError,
  { data: QueryOptimizationRequest },
  TContext
> => {
  const mutationKey = ["optimizeQuery"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof optimizeQuery>>,
    { data: QueryOptimizationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return optimizeQuery(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type OptimizeQueryMutationResult = NonNullable<
  Awaited<ReturnType<typeof optimizeQuery>>
>;
export type OptimizeQueryMutationBody = QueryOptimizationRequest;
export type OptimizeQueryMutationError = Error | Error;

/**
 * @summary „ÇØ„Ç®„É™ÊúÄÈÅ©Âåñ„ÇíÂÆüË°å
 */
export const useOptimizeQuery = <TError = Error | Error, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof optimizeQuery>>,
      TError,
      { data: QueryOptimizationRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof optimizeQuery>>,
  TError,
  { data: QueryOptimizationRequest },
  TContext
> => {
  const mutationOptions = getOptimizeQueryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
