/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * NOVA API
 * NOVA provides Network Oriented Visualized Analysis via intuitive network graphs to uncover hidden insights.
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * @summary リサーチを実行
 */
export const executeResearchBody = zod.object({
  query: zod.string().min(1).describe("リサーチクエリ"),
  selectedText: zod.string().optional().describe("選択されたテキスト"),
  voiceCommand: zod.string().optional().describe("音声コマンド"),
  voiceTranscript: zod
    .string()
    .optional()
    .describe("音声認識から得られた元のテキスト"),
});

/**
 * @summary リサーチスナップショットを取得
 */
export const getResearchSnapshotParams = zod.object({
  id: zod.string(),
});

export const getResearchSnapshotResponse = zod.object({
  id: zod.string().describe("リサーチID"),
  query: zod.string().describe("初期クエリ"),
  selectedText: zod.string().nullish().describe("選択されたテキスト"),
  voiceCommand: zod.string().nullish().describe("音声コマンド（構造化済み）"),
  status: zod.enum(["pending", "completed", "failed"]).describe("リサーチ状態"),
  revision: zod.number().min(1).describe("スナップショットのリビジョン"),
  results: zod
    .array(
      zod.object({
        id: zod.string(),
        content: zod.string(),
        htmlContent: zod.string(),
        source: zod.string(),
        relevanceScore: zod.number(),
        processedCitations: zod
          .array(
            zod.object({
              id: zod.string(),
              number: zod.number(),
              url: zod.url(),
              title: zod.string().nullish(),
              domain: zod.string().nullish(),
            }),
          )
          .nullish(),
      }),
    )
    .optional(),
  searchResults: zod
    .array(
      zod.object({
        id: zod.string(),
        title: zod.string(),
        url: zod.url(),
        snippet: zod.string().nullish(),
        relevanceScore: zod.number().nullish(),
        lastUpdated: zod.iso.datetime({}).nullish(),
      }),
    )
    .optional(),
  citations: zod.array(zod.string()).optional(),
  createdAt: zod.iso.datetime({}),
  updatedAt: zod.iso.datetime({}),
  lastError: zod
    .object({
      message: zod.string().optional(),
      code: zod.string().optional(),
    })
    .nullish(),
});

/**
 * @summary リサーチイベントのSSEストリーム
 */
export const streamResearchEventsParams = zod.object({
  id: zod.string(),
});

export const streamResearchEventsQueryParams = zod.object({
  lastEventId: zod.string().optional(),
});

/**
 * @summary 追いリサーチを実行
 */
export const reExecuteResearchParams = zod.object({
  id: zod.string(),
});

/**
 * @summary クエリ最適化を実行
 */
export const optimizeQueryBodyUserContextPreviousOptimizationsItemCandidatesItemCoverageScoreMin = 0;

export const optimizeQueryBodyUserContextPreviousOptimizationsItemCandidatesItemCoverageScoreMax = 1;

export const optimizeQueryBody = zod.object({
  originalQuery: zod.string().min(1).describe("元の曖昧クエリ"),
  selectedText: zod.string().optional().describe("選択テキスト"),
  voiceCommand: zod
    .enum([
      "deepdive",
      "perspective",
      "concrete",
      "data",
      "compare",
      "trend",
      "practical",
      "summary",
    ])
    .optional()
    .describe("音声解釈パターン"),
  voiceTranscript: zod
    .string()
    .optional()
    .describe("音声認識から得られた元のテキスト"),
  sessionId: zod.string().optional().describe("クエリ最適化セッションID"),
  researchHistory: zod
    .array(
      zod.object({
        id: zod.string().describe("リサーチID"),
        query: zod.string().describe("初期クエリ"),
        status: zod
          .enum(["pending", "completed", "failed"])
          .describe("リサーチ状態"),
        results: zod
          .array(
            zod.object({
              id: zod.string().describe("結果ID"),
              content: zod.string().describe("HTML化されたリサーチ結果内容"),
              htmlContent: zod
                .string()
                .describe("サニタイズ済みHTMLコンテンツ"),
              source: zod.string().describe("情報源"),
              relevanceScore: zod.number().optional().describe("関連度スコア"),
              voicePattern: zod
                .enum([
                  "deepdive",
                  "perspective",
                  "concrete",
                  "data",
                  "compare",
                  "trend",
                  "practical",
                  "summary",
                ])
                .optional()
                .describe("音声解釈パターン"),
              processedCitations: zod
                .array(
                  zod.object({
                    id: zod.string().describe("引用ID（ref1, ref2など）"),
                    number: zod.number().describe("引用番号（1, 2など）"),
                    url: zod.string().describe("引用URL"),
                    title: zod.string().nullish().describe("引用タイトル"),
                    domain: zod.string().nullish().describe("引用ドメイン"),
                  }),
                )
                .optional()
                .describe("構造化された引用情報"),
            }),
          )
          .optional()
          .describe("リサーチ結果"),
        searchResults: zod
          .array(
            zod.object({
              title: zod.string().describe("ページタイトル"),
              url: zod.string().describe("ページURL"),
              snippet: zod.string().describe("ページ概要"),
              date: zod
                .string()
                .nullish()
                .describe("記事作成日（オプショナル）"),
              last_updated: zod
                .string()
                .nullish()
                .describe("最終更新日（オプショナル）"),
            }),
          )
          .optional()
          .describe("Perplexity検索結果"),
        citations: zod.array(zod.string()).optional().describe("引用URL一覧"),
        createdAt: zod.iso.datetime({}).describe("作成日時"),
        updatedAt: zod.iso.datetime({}).optional().describe("更新日時"),
      }),
    )
    .optional()
    .describe("過去のリサーチ履歴"),
  userContext: zod
    .object({
      interests: zod.array(zod.string()).optional(),
      expertise: zod.array(zod.string()).optional(),
      previousOptimizations: zod
        .array(
          zod.object({
            candidates: zod
              .array(
                zod.object({
                  id: zod.string().describe("候補を一意に識別するID"),
                  query: zod.string().describe("提案クエリ"),
                  coverageScore: zod
                    .number()
                    .min(
                      optimizeQueryBodyUserContextPreviousOptimizationsItemCandidatesItemCoverageScoreMin,
                    )
                    .max(
                      optimizeQueryBodyUserContextPreviousOptimizationsItemCandidatesItemCoverageScoreMax,
                    )
                    .describe("ユーザー要件を満たしている度合い（0-1）"),
                  coverageExplanation: zod
                    .string()
                    .describe("スコアの理由や含まれる要件の説明"),
                  addedAspects: zod
                    .array(zod.string())
                    .optional()
                    .describe("特に補強した観点"),
                  improvementReason: zod
                    .string()
                    .optional()
                    .describe("クエリがどのように改善されたか"),
                  suggestedFollowups: zod
                    .array(zod.string())
                    .optional()
                    .describe("候補クエリに基づく追加調査案"),
                }),
              )
              .min(1)
              .describe("最適化されたクエリ候補の一覧"),
            evaluationSummary: zod
              .string()
              .optional()
              .describe("候補全体に関するまとめとアドバイス"),
            recommendedCandidateId: zod
              .string()
              .optional()
              .describe("LLMが推奨する候補のID"),
          }),
        )
        .optional(),
    })
    .nullish(),
});

export const optimizeQueryResponseResultCandidatesItemCoverageScoreMin = 0;

export const optimizeQueryResponseResultCandidatesItemCoverageScoreMax = 1;

export const optimizeQueryResponse = zod.object({
  sessionId: zod.string().describe("クエリ最適化セッションID"),
  result: zod.object({
    candidates: zod
      .array(
        zod.object({
          id: zod.string().describe("候補を一意に識別するID"),
          query: zod.string().describe("提案クエリ"),
          coverageScore: zod
            .number()
            .min(optimizeQueryResponseResultCandidatesItemCoverageScoreMin)
            .max(optimizeQueryResponseResultCandidatesItemCoverageScoreMax)
            .describe("ユーザー要件を満たしている度合い（0-1）"),
          coverageExplanation: zod
            .string()
            .describe("スコアの理由や含まれる要件の説明"),
          addedAspects: zod
            .array(zod.string())
            .optional()
            .describe("特に補強した観点"),
          improvementReason: zod
            .string()
            .optional()
            .describe("クエリがどのように改善されたか"),
          suggestedFollowups: zod
            .array(zod.string())
            .optional()
            .describe("候補クエリに基づく追加調査案"),
        }),
      )
      .min(1)
      .describe("最適化されたクエリ候補の一覧"),
    evaluationSummary: zod
      .string()
      .optional()
      .describe("候補全体に関するまとめとアドバイス"),
    recommendedCandidateId: zod
      .string()
      .optional()
      .describe("LLMが推奨する候補のID"),
  }),
});
